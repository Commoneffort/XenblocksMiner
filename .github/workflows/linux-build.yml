name: Linux-build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container: 
      image: nvidia/cuda:11.8.0-devel-centos7
    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      # Not using "VCPKG_ROOT" because a variable with the same name is defined in the VS's
      # Developer Command Prompt environment in VS 2022 17.6, which would override this one 
      # if it had the same name.
      _VCPKG_: ${{ github.workspace }}/vcpkg
      # Tells vcpkg where binary packages are stored.
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      # Let's use GitHub Action cache as storage for the vcpkg Binary Caching feature.
      VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'
    steps:
    # Set env vars needed for vcpkg to leverage the GitHub Action cache as a storage
    # for Binary Caching.
    - uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Install dependencies
      run: |
        yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
        yum -y install git curl zip unzip tar
        yum -y groupinstall "Development tools"
        yum install -y centos-release-scl
        yum install -y devtoolset-11-gcc devtoolset-11-gcc-c++ devtoolset-11-binutils
        yum install kernel-devel -y 
        yum install perl-IPC-Cmd -y
        git config --global --add safe.directory "*"
        
    - name: Setup devtoolset-11
      run: |
        echo "PATH=/opt/rh/devtoolset-11/root/usr/bin:$PATH" >> $GITHUB_ENV
    - name: Test GCC
      run: |
        gcc -v
        
        
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
      run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
      shell: bash
        
    - name: Get CMake 3.29.0
      run: |
          curl -L https://github.com/Kitware/CMake/releases/download/v3.29.0/cmake-3.29.0-linux-x86_64.sh -o cmake-install.sh
          chmod +x cmake-install.sh
          ./cmake-install.sh --skip-license --prefix=/usr/local

    # Restore vcpkg from the GitHub Action cache service. Note that packages are restored by vcpkg's binary caching
    # when it is being run afterwards by CMake.
    - name: Restore vcpkg
      uses: actions/cache@v3
      with:
        # The first path is the location of vcpkg: it contains the vcpkg executable and data files, as long as the
        # built package archives (aka binary cache) which are located by VCPKG_DEFAULT_BINARY_CACHE env var.
        # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
        path: |
          ${{ env._VCPKG_ }}
          !${{ env._VCPKG_ }}/buildtrees
          !${{ env._VCPKG_ }}/packages
          !${{ env._VCPKG_ }}/downloads
          !${{ env._VCPKG_ }}/installed
        # The key is composed in a way that it gets properly invalidated whenever a different version of vcpkg is being used.
        key: |
          ${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}

        
    - name: Build
          # ./vcpkg/vcpkg install boost-program-options
          # ./vcpkg/vcpkg install argon2
          # ./vcpkg/vcpkg install cryptopp
          # ./vcpkg/vcpkg install curl
          # ./vcpkg/vcpkg install nlohmann-json
          # ./vcpkg/vcpkg install openssl
          # ./vcpkg/vcpkg install secp256k1
          # ./vcpkg/vcpkg install crow
      run: |
          cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake
          cmake --build build --config Release

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: xenblocksMiner-linux
        path: build/bin
